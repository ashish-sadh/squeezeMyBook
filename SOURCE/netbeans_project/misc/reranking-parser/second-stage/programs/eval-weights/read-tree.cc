#define yy_create_buffer readtree_create_buffer
#define yy_delete_buffer readtree_delete_buffer
#define yy_scan_buffer readtree_scan_buffer
#define yy_scan_string readtree_scan_string
#define yy_scan_bytes readtree_scan_bytes
#define yy_flex_debug readtree_flex_debug
#define yy_init_buffer readtree_init_buffer
#define yy_flush_buffer readtree_flush_buffer
#define yy_load_buffer_state readtree_load_buffer_state
#define yy_switch_to_buffer readtree_switch_to_buffer
#define yyin readtreein
#define yyleng readtreeleng
#define yylex readtreelex
#define yyout readtreeout
#define yyrestart readtreerestart
#define yytext readtreetext

#line 19 "read-tree.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /pro/dpg/CVSROOT/reranking-parser/second-stage/programs/eval-weights/read-tree.cc,v 1.1.1.1 2005-05-11 16:00:38 mj Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef yyconst struct yy_trans_info *yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
struct yy_trans_info
	{
	short yy_verify;
	short yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[5148] =
    {
 {   0,   0 }, {   0,5020 }, {   0,   0 }, {   0,5018 }, {   1,2080 },
 {   2,2080 }, {   3,2080 }, {   4,2080 }, {   5,2080 }, {   6,2080 },
 {   7,2080 }, {   8,2080 }, {   9,2082 }, {  10,2084 }, {  11,2080 },
 {  12,2080 }, {  13,2080 }, {  14,2080 }, {  15,2080 }, {  16,2080 },
 {  17,2080 }, {  18,2080 }, {  19,2080 }, {  20,2080 }, {  21,2080 },
 {  22,2080 }, {  23,2080 }, {  24,2080 }, {  25,2080 }, {  26,2080 },
 {  27,2080 }, {  28,2080 }, {  29,2080 }, {  30,2080 }, {  31,2080 },
 {  32,2082 }, {  33,2080 }, {  34,2080 }, {  35,2080 }, {  36,2080 },
 {  37,2080 }, {  38,2080 }, {  39,2080 }, {  40,2080 }, {  41,2080 },
 {  42,2080 }, {  43,2080 }, {  44,2080 }, {  45,2080 }, {  46,2080 },

 {  47,2080 }, {  48,2080 }, {  49,2080 }, {  50,2080 }, {  51,2080 },
 {  52,2080 }, {  53,2080 }, {  54,2080 }, {  55,2080 }, {  56,2080 },
 {  57,2080 }, {  58,2080 }, {  59,2080 }, {  60,2080 }, {  61,2080 },
 {  62,2080 }, {  63,2080 }, {  64,2080 }, {  65,2080 }, {  66,2080 },
 {  67,2080 }, {  68,2080 }, {  69,2080 }, {  70,2080 }, {  71,2080 },
 {  72,2080 }, {  73,2080 }, {  74,2080 }, {  75,2080 }, {  76,2080 },
 {  77,2080 }, {  78,2080 }, {  79,2080 }, {  80,2080 }, {  81,2080 },
 {  82,2080 }, {  83,2080 }, {  84,2080 }, {  85,2080 }, {  86,2080 },
 {  87,2080 }, {  88,2080 }, {  89,2080 }, {  90,2080 }, {  91,2080 },
 {  92,2080 }, {  93,2080 }, {  94,2080 }, {  95,2080 }, {  96,2080 },

 {  97,2080 }, {  98,2080 }, {  99,2080 }, { 100,2080 }, { 101,2080 },
 { 102,2080 }, { 103,2080 }, { 104,2080 }, { 105,2080 }, { 106,2080 },
 { 107,2080 }, { 108,2080 }, { 109,2080 }, { 110,2080 }, { 111,2080 },
 { 112,2080 }, { 113,2080 }, { 114,2080 }, { 115,2080 }, { 116,2080 },
 { 117,2080 }, { 118,2080 }, { 119,2080 }, { 120,2080 }, { 121,2080 },
 { 122,2080 }, { 123,2080 }, { 124,2080 }, { 125,2080 }, { 126,2080 },
 { 127,2080 }, { 128,2080 }, {   0,   0 }, {   0,4888 }, {   1,1950 },
 {   2,1950 }, {   3,1950 }, {   4,1950 }, {   5,1950 }, {   6,1950 },
 {   7,1950 }, {   8,1950 }, {   9,1952 }, {  10,1954 }, {  11,1950 },
 {  12,1950 }, {  13,1950 }, {  14,1950 }, {  15,1950 }, {  16,1950 },

 {  17,1950 }, {  18,1950 }, {  19,1950 }, {  20,1950 }, {  21,1950 },
 {  22,1950 }, {  23,1950 }, {  24,1950 }, {  25,1950 }, {  26,1950 },
 {  27,1950 }, {  28,1950 }, {  29,1950 }, {  30,1950 }, {  31,1950 },
 {  32,1952 }, {  33,1950 }, {  34,1950 }, {  35,1950 }, {  36,1950 },
 {  37,1950 }, {  38,1950 }, {  39,1950 }, {  40,1950 }, {  41,1950 },
 {  42,1950 }, {  43,1950 }, {  44,1950 }, {  45,1950 }, {  46,1950 },
 {  47,1950 }, {  48,1950 }, {  49,1950 }, {  50,1950 }, {  51,1950 },
 {  52,1950 }, {  53,1950 }, {  54,1950 }, {  55,1950 }, {  56,1950 },
 {  57,1950 }, {  58,1950 }, {  59,1950 }, {  60,1950 }, {  61,1950 },
 {  62,1950 }, {  63,1950 }, {  64,1950 }, {  65,1950 }, {  66,1950 },

 {  67,1950 }, {  68,1950 }, {  69,1950 }, {  70,1950 }, {  71,1950 },
 {  72,1950 }, {  73,1950 }, {  74,1950 }, {  75,1950 }, {  76,1950 },
 {  77,1950 }, {  78,1950 }, {  79,1950 }, {  80,1950 }, {  81,1950 },
 {  82,1950 }, {  83,1950 }, {  84,1950 }, {  85,1950 }, {  86,1950 },
 {  87,1950 }, {  88,1950 }, {  89,1950 }, {  90,1950 }, {  91,1950 },
 {  92,1950 }, {  93,1950 }, {  94,1950 }, {  95,1950 }, {  96,1950 },
 {  97,1950 }, {  98,1950 }, {  99,1950 }, { 100,1950 }, { 101,1950 },
 { 102,1950 }, { 103,1950 }, { 104,1950 }, { 105,1950 }, { 106,1950 },
 { 107,1950 }, { 108,1950 }, { 109,1950 }, { 110,1950 }, { 111,1950 },
 { 112,1950 }, { 113,1950 }, { 114,1950 }, { 115,1950 }, { 116,1950 },

 { 117,1950 }, { 118,1950 }, { 119,1950 }, { 120,1950 }, { 121,1950 },
 { 122,1950 }, { 123,1950 }, { 124,1950 }, { 125,1950 }, { 126,1950 },
 { 127,1950 }, { 128,1950 }, {   0,   0 }, {   0,4758 }, {   1,1820 },
 {   2,1820 }, {   3,1820 }, {   4,1820 }, {   5,1820 }, {   6,1820 },
 {   7,1820 }, {   8,1820 }, {   9,1822 }, {  10,1824 }, {  11,1820 },
 {  12,1820 }, {  13,1820 }, {  14,1820 }, {  15,1820 }, {  16,1820 },
 {  17,1820 }, {  18,1820 }, {  19,1820 }, {  20,1820 }, {  21,1820 },
 {  22,1820 }, {  23,1820 }, {  24,1820 }, {  25,1820 }, {  26,1820 },
 {  27,1820 }, {  28,1820 }, {  29,1820 }, {  30,1820 }, {  31,1820 },
 {  32,1822 }, {  33,1820 }, {  34,1820 }, {  35,1820 }, {  36,1820 },

 {  37,1820 }, {  38,1820 }, {  39,1820 }, {  40,1826 }, {  41,1820 },
 {  42,1820 }, {  43,1820 }, {  44,1820 }, {  45,1820 }, {  46,1820 },
 {  47,1820 }, {  48,1820 }, {  49,1820 }, {  50,1820 }, {  51,1820 },
 {  52,1820 }, {  53,1820 }, {  54,1820 }, {  55,1820 }, {  56,1820 },
 {  57,1820 }, {  58,1820 }, {  59,1820 }, {  60,1820 }, {  61,1820 },
 {  62,1820 }, {  63,1820 }, {  64,1820 }, {  65,1820 }, {  66,1820 },
 {  67,1820 }, {  68,1820 }, {  69,1820 }, {  70,1820 }, {  71,1820 },
 {  72,1820 }, {  73,1820 }, {  74,1820 }, {  75,1820 }, {  76,1820 },
 {  77,1820 }, {  78,1820 }, {  79,1820 }, {  80,1820 }, {  81,1820 },
 {  82,1820 }, {  83,1820 }, {  84,1820 }, {  85,1820 }, {  86,1820 },

 {  87,1820 }, {  88,1820 }, {  89,1820 }, {  90,1820 }, {  91,1820 },
 {  92,1820 }, {  93,1820 }, {  94,1820 }, {  95,1820 }, {  96,1820 },
 {  97,1820 }, {  98,1820 }, {  99,1820 }, { 100,1820 }, { 101,1820 },
 { 102,1820 }, { 103,1820 }, { 104,1820 }, { 105,1820 }, { 106,1820 },
 { 107,1820 }, { 108,1820 }, { 109,1820 }, { 110,1820 }, { 111,1820 },
 { 112,1820 }, { 113,1820 }, { 114,1820 }, { 115,1820 }, { 116,1820 },
 { 117,1820 }, { 118,1820 }, { 119,1820 }, { 120,1820 }, { 121,1820 },
 { 122,1820 }, { 123,1820 }, { 124,1820 }, { 125,1820 }, { 126,1820 },
 { 127,1820 }, { 128,1820 }, {   0,   0 }, {   0,4628 }, {   1,1690 },
 {   2,1690 }, {   3,1690 }, {   4,1690 }, {   5,1690 }, {   6,1690 },

 {   7,1690 }, {   8,1690 }, {   9,1692 }, {  10,1694 }, {  11,1690 },
 {  12,1690 }, {  13,1690 }, {  14,1690 }, {  15,1690 }, {  16,1690 },
 {  17,1690 }, {  18,1690 }, {  19,1690 }, {  20,1690 }, {  21,1690 },
 {  22,1690 }, {  23,1690 }, {  24,1690 }, {  25,1690 }, {  26,1690 },
 {  27,1690 }, {  28,1690 }, {  29,1690 }, {  30,1690 }, {  31,1690 },
 {  32,1692 }, {  33,1690 }, {  34,1690 }, {  35,1690 }, {  36,1690 },
 {  37,1690 }, {  38,1690 }, {  39,1690 }, {  40,1696 }, {  41,1690 },
 {  42,1690 }, {  43,1690 }, {  44,1690 }, {  45,1690 }, {  46,1690 },
 {  47,1690 }, {  48,1690 }, {  49,1690 }, {  50,1690 }, {  51,1690 },
 {  52,1690 }, {  53,1690 }, {  54,1690 }, {  55,1690 }, {  56,1690 },

 {  57,1690 }, {  58,1690 }, {  59,1690 }, {  60,1690 }, {  61,1690 },
 {  62,1690 }, {  63,1690 }, {  64,1690 }, {  65,1690 }, {  66,1690 },
 {  67,1690 }, {  68,1690 }, {  69,1690 }, {  70,1690 }, {  71,1690 },
 {  72,1690 }, {  73,1690 }, {  74,1690 }, {  75,1690 }, {  76,1690 },
 {  77,1690 }, {  78,1690 }, {  79,1690 }, {  80,1690 }, {  81,1690 },
 {  82,1690 }, {  83,1690 }, {  84,1690 }, {  85,1690 }, {  86,1690 },
 {  87,1690 }, {  88,1690 }, {  89,1690 }, {  90,1690 }, {  91,1690 },
 {  92,1690 }, {  93,1690 }, {  94,1690 }, {  95,1690 }, {  96,1690 },
 {  97,1690 }, {  98,1690 }, {  99,1690 }, { 100,1690 }, { 101,1690 },
 { 102,1690 }, { 103,1690 }, { 104,1690 }, { 105,1690 }, { 106,1690 },

 { 107,1690 }, { 108,1690 }, { 109,1690 }, { 110,1690 }, { 111,1690 },
 { 112,1690 }, { 113,1690 }, { 114,1690 }, { 115,1690 }, { 116,1690 },
 { 117,1690 }, { 118,1690 }, { 119,1690 }, { 120,1690 }, { 121,1690 },
 { 122,1690 }, { 123,1690 }, { 124,1690 }, { 125,1690 }, { 126,1690 },
 { 127,1690 }, { 128,1690 }, {   0,   0 }, {   0,4498 }, {   1,1560 },
 {   2,1560 }, {   3,1560 }, {   4,1560 }, {   5,1560 }, {   6,1560 },
 {   7,1560 }, {   8,1560 }, {   9,1562 }, {  10,1564 }, {  11,1560 },
 {  12,1560 }, {  13,1560 }, {  14,1560 }, {  15,1560 }, {  16,1560 },
 {  17,1560 }, {  18,1560 }, {  19,1560 }, {  20,1560 }, {  21,1560 },
 {  22,1560 }, {  23,1560 }, {  24,1560 }, {  25,1560 }, {  26,1560 },

 {  27,1560 }, {  28,1560 }, {  29,1560 }, {  30,1560 }, {  31,1560 },
 {  32,1562 }, {  33,1560 }, {  34,1560 }, {  35,1560 }, {  36,1560 },
 {  37,1560 }, {  38,1560 }, {  39,1560 }, {  40,1568 }, {  41,1560 },
 {  42,1560 }, {  43,1560 }, {  44,1560 }, {  45,1560 }, {  46,1560 },
 {  47,1560 }, {  48,1560 }, {  49,1560 }, {  50,1560 }, {  51,1560 },
 {  52,1560 }, {  53,1560 }, {  54,1560 }, {  55,1560 }, {  56,1560 },
 {  57,1560 }, {  58,1560 }, {  59,1560 }, {  60,1560 }, {  61,1560 },
 {  62,1560 }, {  63,1560 }, {  64,1560 }, {  65,1560 }, {  66,1560 },
 {  67,1560 }, {  68,1560 }, {  69,1560 }, {  70,1560 }, {  71,1560 },
 {  72,1560 }, {  73,1560 }, {  74,1560 }, {  75,1560 }, {  76,1560 },

 {  77,1560 }, {  78,1560 }, {  79,1560 }, {  80,1560 }, {  81,1560 },
 {  82,1560 }, {  83,1560 }, {  84,1560 }, {  85,1560 }, {  86,1560 },
 {  87,1560 }, {  88,1560 }, {  89,1560 }, {  90,1560 }, {  91,1560 },
 {  92,1560 }, {  93,1560 }, {  94,1560 }, {  95,1560 }, {  96,1560 },
 {  97,1560 }, {  98,1560 }, {  99,1560 }, { 100,1560 }, { 101,1560 },
 { 102,1560 }, { 103,1560 }, { 104,1560 }, { 105,1560 }, { 106,1560 },
 { 107,1560 }, { 108,1560 }, { 109,1560 }, { 110,1560 }, { 111,1560 },
 { 112,1560 }, { 113,1560 }, { 114,1560 }, { 115,1560 }, { 116,1560 },
 { 117,1560 }, { 118,1560 }, { 119,1560 }, { 120,1560 }, { 121,1560 },
 { 122,1560 }, { 123,1560 }, { 124,1560 }, { 125,1560 }, { 126,1560 },

 { 127,1560 }, { 128,1560 }, {   0,   0 }, {   0,4368 }, {   1,1430 },
 {   2,1430 }, {   3,1430 }, {   4,1430 }, {   5,1430 }, {   6,1430 },
 {   7,1430 }, {   8,1430 }, {   9,1432 }, {  10,1434 }, {  11,1430 },
 {  12,1430 }, {  13,1430 }, {  14,1430 }, {  15,1430 }, {  16,1430 },
 {  17,1430 }, {  18,1430 }, {  19,1430 }, {  20,1430 }, {  21,1430 },
 {  22,1430 }, {  23,1430 }, {  24,1430 }, {  25,1430 }, {  26,1430 },
 {  27,1430 }, {  28,1430 }, {  29,1430 }, {  30,1430 }, {  31,1430 },
 {  32,1432 }, {  33,1430 }, {  34,1430 }, {  35,1430 }, {  36,1430 },
 {  37,1430 }, {  38,1430 }, {  39,1430 }, {  40,1438 }, {  41,1430 },
 {  42,1430 }, {  43,1430 }, {  44,1430 }, {  45,1430 }, {  46,1430 },

 {  47,1430 }, {  48,1430 }, {  49,1430 }, {  50,1430 }, {  51,1430 },
 {  52,1430 }, {  53,1430 }, {  54,1430 }, {  55,1430 }, {  56,1430 },
 {  57,1430 }, {  58,1430 }, {  59,1430 }, {  60,1430 }, {  61,1430 },
 {  62,1430 }, {  63,1430 }, {  64,1430 }, {  65,1430 }, {  66,1430 },
 {  67,1430 }, {  68,1430 }, {  69,1430 }, {  70,1430 }, {  71,1430 },
 {  72,1430 }, {  73,1430 }, {  74,1430 }, {  75,1430 }, {  76,1430 },
 {  77,1430 }, {  78,1430 }, {  79,1430 }, {  80,1430 }, {  81,1430 },
 {  82,1430 }, {  83,1430 }, {  84,1430 }, {  85,1430 }, {  86,1430 },
 {  87,1430 }, {  88,1430 }, {  89,1430 }, {  90,1430 }, {  91,1430 },
 {  92,1430 }, {  93,1430 }, {  94,1430 }, {  95,1430 }, {  96,1430 },

 {  97,1430 }, {  98,1430 }, {  99,1430 }, { 100,1430 }, { 101,1430 },
 { 102,1430 }, { 103,1430 }, { 104,1430 }, { 105,1430 }, { 106,1430 },
 { 107,1430 }, { 108,1430 }, { 109,1430 }, { 110,1430 }, { 111,1430 },
 { 112,1430 }, { 113,1430 }, { 114,1430 }, { 115,1430 }, { 116,1430 },
 { 117,1430 }, { 118,1430 }, { 119,1430 }, { 120,1430 }, { 121,1430 },
 { 122,1430 }, { 123,1430 }, { 124,1430 }, { 125,1430 }, { 126,1430 },
 { 127,1430 }, { 128,1430 }, {   0,   0 }, {   0,4238 }, {   1,1324 },
 {   2,1324 }, {   3,1324 }, {   4,1324 }, {   5,1324 }, {   6,1324 },
 {   7,1324 }, {   8,1324 }, {   9,1302 }, {  10,1304 }, {  11,1324 },
 {  12,1324 }, {  13,1324 }, {  14,1324 }, {  15,1324 }, {  16,1324 },

 {  17,1324 }, {  18,1324 }, {  19,1324 }, {  20,1324 }, {  21,1324 },
 {  22,1324 }, {  23,1324 }, {  24,1324 }, {  25,1324 }, {  26,1324 },
 {  27,1324 }, {  28,1324 }, {  29,1324 }, {  30,1324 }, {  31,1324 },
 {  32,1302 }, {  33,1324 }, {  34,1324 }, {  35,1324 }, {  36,1324 },
 {  37,1324 }, {  38,1324 }, {  39,1324 }, {  40,1310 }, {  41,1313 },
 {  42,1324 }, {  43,1324 }, {  44,1324 }, {  45,1324 }, {  46,1324 },
 {  47,1324 }, {  48,1324 }, {  49,1324 }, {  50,1324 }, {  51,1324 },
 {  52,1324 }, {  53,1324 }, {  54,1324 }, {  55,1324 }, {  56,1324 },
 {  57,1324 }, {  58,1324 }, {  59,1324 }, {  60,1324 }, {  61,1324 },
 {  62,1324 }, {  63,1324 }, {  64,1324 }, {  65,1324 }, {  66,1324 },

 {  67,1324 }, {  68,1324 }, {  69,1324 }, {  70,1324 }, {  71,1324 },
 {  72,1324 }, {  73,1324 }, {  74,1324 }, {  75,1324 }, {  76,1324 },
 {  77,1324 }, {  78,1324 }, {  79,1324 }, {  80,1324 }, {  81,1324 },
 {  82,1324 }, {  83,1324 }, {  84,1324 }, {  85,1324 }, {  86,1324 },
 {  87,1324 }, {  88,1324 }, {  89,1324 }, {  90,1324 }, {  91,1324 },
 {  92,1324 }, {  93,1324 }, {  94,1324 }, {  95,1324 }, {  96,1324 },
 {  97,1324 }, {  98,1324 }, {  99,1324 }, { 100,1324 }, { 101,1324 },
 { 102,1324 }, { 103,1324 }, { 104,1324 }, { 105,1324 }, { 106,1324 },
 { 107,1324 }, { 108,1324 }, { 109,1324 }, { 110,1324 }, { 111,1324 },
 { 112,1324 }, { 113,1324 }, { 114,1324 }, { 115,1324 }, { 116,1324 },

 { 117,1324 }, { 118,1324 }, { 119,1324 }, { 120,1324 }, { 121,1324 },
 { 122,1324 }, { 123,1324 }, { 124,1324 }, { 125,1324 }, { 126,1324 },
 { 127,1324 }, { 128,1324 }, {   0,   0 }, {   0,4108 }, {   1,1194 },
 {   2,1194 }, {   3,1194 }, {   4,1194 }, {   5,1194 }, {   6,1194 },
 {   7,1194 }, {   8,1194 }, {   9,1172 }, {  10,1174 }, {  11,1194 },
 {  12,1194 }, {  13,1194 }, {  14,1194 }, {  15,1194 }, {  16,1194 },
 {  17,1194 }, {  18,1194 }, {  19,1194 }, {  20,1194 }, {  21,1194 },
 {  22,1194 }, {  23,1194 }, {  24,1194 }, {  25,1194 }, {  26,1194 },
 {  27,1194 }, {  28,1194 }, {  29,1194 }, {  30,1194 }, {  31,1194 },
 {  32,1172 }, {  33,1194 }, {  34,1194 }, {  35,1194 }, {  36,1194 },

 {  37,1194 }, {  38,1194 }, {  39,1194 }, {  40,1180 }, {  41,1183 },
 {  42,1194 }, {  43,1194 }, {  44,1194 }, {  45,1194 }, {  46,1194 },
 {  47,1194 }, {  48,1194 }, {  49,1194 }, {  50,1194 }, {  51,1194 },
 {  52,1194 }, {  53,1194 }, {  54,1194 }, {  55,1194 }, {  56,1194 },
 {  57,1194 }, {  58,1194 }, {  59,1194 }, {  60,1194 }, {  61,1194 },
 {  62,1194 }, {  63,1194 }, {  64,1194 }, {  65,1194 }, {  66,1194 },
 {  67,1194 }, {  68,1194 }, {  69,1194 }, {  70,1194 }, {  71,1194 },
 {  72,1194 }, {  73,1194 }, {  74,1194 }, {  75,1194 }, {  76,1194 },
 {  77,1194 }, {  78,1194 }, {  79,1194 }, {  80,1194 }, {  81,1194 },
 {  82,1194 }, {  83,1194 }, {  84,1194 }, {  85,1194 }, {  86,1194 },

 {  87,1194 }, {  88,1194 }, {  89,1194 }, {  90,1194 }, {  91,1194 },
 {  92,1194 }, {  93,1194 }, {  94,1194 }, {  95,1194 }, {  96,1194 },
 {  97,1194 }, {  98,1194 }, {  99,1194 }, { 100,1194 }, { 101,1194 },
 { 102,1194 }, { 103,1194 }, { 104,1194 }, { 105,1194 }, { 106,1194 },
 { 107,1194 }, { 108,1194 }, { 109,1194 }, { 110,1194 }, { 111,1194 },
 { 112,1194 }, { 113,1194 }, { 114,1194 }, { 115,1194 }, { 116,1194 },
 { 117,1194 }, { 118,1194 }, { 119,1194 }, { 120,1194 }, { 121,1194 },
 { 122,1194 }, { 123,1194 }, { 124,1194 }, { 125,1194 }, { 126,1194 },
 { 127,1194 }, { 128,1194 }, {   0,   0 }, {   0,3978 }, {   1,1040 },
 {   2,1040 }, {   3,1040 }, {   4,1040 }, {   5,1040 }, {   6,1040 },

 {   7,1040 }, {   8,1040 }, {   9,1042 }, {  10,1044 }, {  11,1040 },
 {  12,1040 }, {  13,1040 }, {  14,1040 }, {  15,1040 }, {  16,1040 },
 {  17,1040 }, {  18,1040 }, {  19,1040 }, {  20,1040 }, {  21,1040 },
 {  22,1040 }, {  23,1040 }, {  24,1040 }, {  25,1040 }, {  26,1040 },
 {  27,1040 }, {  28,1040 }, {  29,1040 }, {  30,1040 }, {  31,1040 },
 {  32,1042 }, {  33,1040 }, {  34,1040 }, {  35,1040 }, {  36,1040 },
 {  37,1040 }, {  38,1040 }, {  39,1040 }, {  40,1055 }, {  41,1057 },
 {  42,1040 }, {  43,1040 }, {  44,1040 }, {  45,1040 }, {  46,1040 },
 {  47,1040 }, {  48,1040 }, {  49,1040 }, {  50,1040 }, {  51,1040 },
 {  52,1040 }, {  53,1040 }, {  54,1040 }, {  55,1040 }, {  56,1040 },

 {  57,1040 }, {  58,1040 }, {  59,1040 }, {  60,1040 }, {  61,1040 },
 {  62,1040 }, {  63,1040 }, {  64,1040 }, {  65,1040 }, {  66,1040 },
 {  67,1040 }, {  68,1040 }, {  69,1040 }, {  70,1040 }, {  71,1040 },
 {  72,1040 }, {  73,1040 }, {  74,1040 }, {  75,1040 }, {  76,1040 },
 {  77,1040 }, {  78,1040 }, {  79,1040 }, {  80,1040 }, {  81,1040 },
 {  82,1040 }, {  83,1040 }, {  84,1040 }, {  85,1040 }, {  86,1040 },
 {  87,1040 }, {  88,1040 }, {  89,1040 }, {  90,1040 }, {  91,1040 },
 {  92,1040 }, {  93,1040 }, {  94,1040 }, {  95,1040 }, {  96,1040 },
 {  97,1040 }, {  98,1040 }, {  99,1040 }, { 100,1040 }, { 101,1040 },
 { 102,1040 }, { 103,1040 }, { 104,1040 }, { 105,1040 }, { 106,1040 },

 { 107,1040 }, { 108,1040 }, { 109,1040 }, { 110,1040 }, { 111,1040 },
 { 112,1040 }, { 113,1040 }, { 114,1040 }, { 115,1040 }, { 116,1040 },
 { 117,1040 }, { 118,1040 }, { 119,1040 }, { 120,1040 }, { 121,1040 },
 { 122,1040 }, { 123,1040 }, { 124,1040 }, { 125,1040 }, { 126,1040 },
 { 127,1040 }, { 128,1040 }, {   0,   0 }, {   0,3848 }, {   1, 910 },
 {   2, 910 }, {   3, 910 }, {   4, 910 }, {   5, 910 }, {   6, 910 },
 {   7, 910 }, {   8, 910 }, {   9, 912 }, {  10, 914 }, {  11, 910 },
 {  12, 910 }, {  13, 910 }, {  14, 910 }, {  15, 910 }, {  16, 910 },
 {  17, 910 }, {  18, 910 }, {  19, 910 }, {  20, 910 }, {  21, 910 },
 {  22, 910 }, {  23, 910 }, {  24, 910 }, {  25, 910 }, {  26, 910 },

 {  27, 910 }, {  28, 910 }, {  29, 910 }, {  30, 910 }, {  31, 910 },
 {  32, 912 }, {  33, 910 }, {  34, 910 }, {  35, 910 }, {  36, 910 },
 {  37, 910 }, {  38, 910 }, {  39, 910 }, {  40, 925 }, {  41, 927 },
 {  42, 910 }, {  43, 910 }, {  44, 910 }, {  45, 910 }, {  46, 910 },
 {  47, 910 }, {  48, 910 }, {  49, 910 }, {  50, 910 }, {  51, 910 },
 {  52, 910 }, {  53, 910 }, {  54, 910 }, {  55, 910 }, {  56, 910 },
 {  57, 910 }, {  58, 910 }, {  59, 910 }, {  60, 910 }, {  61, 910 },
 {  62, 910 }, {  63, 910 }, {  64, 910 }, {  65, 910 }, {  66, 910 },
 {  67, 910 }, {  68, 910 }, {  69, 910 }, {  70, 910 }, {  71, 910 },
 {  72, 910 }, {  73, 910 }, {  74, 910 }, {  75, 910 }, {  76, 910 },

 {  77, 910 }, {  78, 910 }, {  79, 910 }, {  80, 910 }, {  81, 910 },
 {  82, 910 }, {  83, 910 }, {  84, 910 }, {  85, 910 }, {  86, 910 },
 {  87, 910 }, {  88, 910 }, {  89, 910 }, {  90, 910 }, {  91, 910 },
 {  92, 910 }, {  93, 910 }, {  94, 910 }, {  95, 910 }, {  96, 910 },
 {  97, 910 }, {  98, 910 }, {  99, 910 }, { 100, 910 }, { 101, 910 },
 { 102, 910 }, { 103, 910 }, { 104, 910 }, { 105, 910 }, { 106, 910 },
 { 107, 910 }, { 108, 910 }, { 109, 910 }, { 110, 910 }, { 111, 910 },
 { 112, 910 }, { 113, 910 }, { 114, 910 }, { 115, 910 }, { 116, 910 },
 { 117, 910 }, { 118, 910 }, { 119, 910 }, { 120, 910 }, { 121, 910 },
 { 122, 910 }, { 123, 910 }, { 124, 910 }, { 125, 910 }, { 126, 910 },

 { 127, 910 }, { 128, 910 }, {   0,   0 }, {   0,3718 }, {   1, 934 },
 {   2, 934 }, {   3, 934 }, {   4, 934 }, {   5, 934 }, {   6, 934 },
 {   7, 934 }, {   8, 934 }, {   9, 782 }, {  10, 784 }, {  11, 934 },
 {  12, 934 }, {  13, 934 }, {  14, 934 }, {  15, 934 }, {  16, 934 },
 {  17, 934 }, {  18, 934 }, {  19, 934 }, {  20, 934 }, {  21, 934 },
 {  22, 934 }, {  23, 934 }, {  24, 934 }, {  25, 934 }, {  26, 934 },
 {  27, 934 }, {  28, 934 }, {  29, 934 }, {  30, 934 }, {  31, 934 },
 {  32, 782 }, {  33, 934 }, {  34, 934 }, {  35, 934 }, {  36,1064 },
 {  37, 934 }, {  38, 934 }, {  39, 934 }, {  40, 780 }, {  41, 780 },
 {  42,1064 }, {  43, 934 }, {  44, 934 }, {  45,1156 }, {  46, 934 },

 {  47, 934 }, {  48,1064 }, {  49,1064 }, {  50,1064 }, {  51,1064 },
 {  52,1064 }, {  53,1064 }, {  54,1064 }, {  55,1064 }, {  56,1064 },
 {  57,1064 }, {  58, 934 }, {  59, 934 }, {  60, 934 }, {  61, 934 },
 {  62, 934 }, {  63,1286 }, {  64, 934 }, {  65,1064 }, {  66,1064 },
 {  67,1064 }, {  68,1064 }, {  69,1064 }, {  70,1064 }, {  71,1064 },
 {  72,1064 }, {  73,1064 }, {  74,1064 }, {  75,1064 }, {  76,1064 },
 {  77,1064 }, {  78,1064 }, {  79,1064 }, {  80,1064 }, {  81,1064 },
 {  82,1064 }, {  83,1064 }, {  84,1064 }, {  85,1064 }, {  86,1064 },
 {  87,1064 }, {  88,1064 }, {  89,1064 }, {  90,1064 }, {  91, 934 },
 {  92, 934 }, {  93, 934 }, {  94, 934 }, {  95, 934 }, {  96, 934 },

 {  97, 934 }, {  98, 934 }, {  99, 934 }, { 100, 934 }, { 101, 934 },
 { 102, 934 }, { 103, 934 }, { 104, 934 }, { 105, 934 }, { 106, 934 },
 { 107, 934 }, { 108, 934 }, { 109, 934 }, { 110, 934 }, { 111, 934 },
 { 112, 934 }, { 113, 934 }, { 114, 934 }, { 115, 934 }, { 116, 934 },
 { 117, 934 }, { 118, 934 }, { 119, 934 }, { 120, 934 }, { 121, 934 },
 { 122, 934 }, { 123, 934 }, { 124, 934 }, { 125, 934 }, { 126, 934 },
 { 127, 934 }, { 128, 934 }, {   0,   0 }, {   0,3588 }, {   1, 804 },
 {   2, 804 }, {   3, 804 }, {   4, 804 }, {   5, 804 }, {   6, 804 },
 {   7, 804 }, {   8, 804 }, {   9, 652 }, {  10, 654 }, {  11, 804 },
 {  12, 804 }, {  13, 804 }, {  14, 804 }, {  15, 804 }, {  16, 804 },

 {  17, 804 }, {  18, 804 }, {  19, 804 }, {  20, 804 }, {  21, 804 },
 {  22, 804 }, {  23, 804 }, {  24, 804 }, {  25, 804 }, {  26, 804 },
 {  27, 804 }, {  28, 804 }, {  29, 804 }, {  30, 804 }, {  31, 804 },
 {  32, 652 }, {  33, 804 }, {  34, 804 }, {  35, 804 }, {  36, 934 },
 {  37, 804 }, {  38, 804 }, {  39, 804 }, {  40, 650 }, {  41, 650 },
 {  42, 934 }, {  43, 804 }, {  44, 804 }, {  45,1026 }, {  46, 804 },
 {  47, 804 }, {  48, 934 }, {  49, 934 }, {  50, 934 }, {  51, 934 },
 {  52, 934 }, {  53, 934 }, {  54, 934 }, {  55, 934 }, {  56, 934 },
 {  57, 934 }, {  58, 804 }, {  59, 804 }, {  60, 804 }, {  61, 804 },
 {  62, 804 }, {  63,1156 }, {  64, 804 }, {  65, 934 }, {  66, 934 },

 {  67, 934 }, {  68, 934 }, {  69, 934 }, {  70, 934 }, {  71, 934 },
 {  72, 934 }, {  73, 934 }, {  74, 934 }, {  75, 934 }, {  76, 934 },
 {  77, 934 }, {  78, 934 }, {  79, 934 }, {  80, 934 }, {  81, 934 },
 {  82, 934 }, {  83, 934 }, {  84, 934 }, {  85, 934 }, {  86, 934 },
 {  87, 934 }, {  88, 934 }, {  89, 934 }, {  90, 934 }, {  91, 804 },
 {  92, 804 }, {  93, 804 }, {  94, 804 }, {  95, 804 }, {  96, 804 },
 {  97, 804 }, {  98, 804 }, {  99, 804 }, { 100, 804 }, { 101, 804 },
 { 102, 804 }, { 103, 804 }, { 104, 804 }, { 105, 804 }, { 106, 804 },
 { 107, 804 }, { 108, 804 }, { 109, 804 }, { 110, 804 }, { 111, 804 },
 { 112, 804 }, { 113, 804 }, { 114, 804 }, { 115, 804 }, { 116, 804 },

 { 117, 804 }, { 118, 804 }, { 119, 804 }, { 120, 804 }, { 121, 804 },
 { 122, 804 }, { 123, 804 }, { 124, 804 }, { 125, 804 }, { 126, 804 },
 { 127, 804 }, { 128, 804 }, {   0,   0 }, {   0,3458 }, {   1, 539 },
 {   2, 539 }, {   3, 539 }, {   4, 539 }, {   5, 539 }, {   6, 539 },
 {   7, 539 }, {   8, 539 }, {   9, 539 }, {  10, 541 }, {  11, 539 },
 {  12, 539 }, {  13, 539 }, {  14, 539 }, {  15, 539 }, {  16, 539 },
 {  17, 539 }, {  18, 539 }, {  19, 539 }, {  20, 539 }, {  21, 539 },
 {  22, 539 }, {  23, 539 }, {  24, 539 }, {  25, 539 }, {  26, 539 },
 {  27, 539 }, {  28, 539 }, {  29, 539 }, {  30, 539 }, {  31, 539 },
 {  32, 539 }, {  33, 539 }, {  34, 539 }, {  35, 539 }, {  36, 539 },

 {  37, 539 }, {  38, 539 }, {  39, 539 }, {  40, 539 }, {  41, 539 },
 {  42, 539 }, {  43,1156 }, {  44, 539 }, {  45,1286 }, {  46, 539 },
 {  47, 539 }, {  48, 539 }, {  49, 539 }, {  50, 539 }, {  51, 539 },
 {  52, 539 }, {  53, 539 }, {  54, 539 }, {  55, 539 }, {  56, 539 },
 {  57, 539 }, {  58, 539 }, {  59, 539 }, {  60, 539 }, {  61,1156 },
 {  62, 539 }, {  63, 539 }, {  64, 539 }, {  65, 539 }, {  66, 539 },
 {  67, 539 }, {  68, 539 }, {  69, 539 }, {  70, 539 }, {  71, 539 },
 {  72, 539 }, {  73, 539 }, {  74, 539 }, {  75, 539 }, {  76, 539 },
 {  77, 539 }, {  78, 539 }, {  79, 539 }, {  80, 539 }, {  81, 539 },
 {  82, 539 }, {  83, 539 }, {  84, 539 }, {  85, 539 }, {  86, 539 },

 {  87, 539 }, {  88, 539 }, {  89, 539 }, {  90, 539 }, {  91, 539 },
 {  92, 539 }, {  93, 539 }, {  94, 539 }, {  95, 539 }, {  96, 539 },
 {  97, 539 }, {  98, 539 }, {  99, 539 }, { 100, 539 }, { 101, 539 },
 { 102, 539 }, { 103, 539 }, { 104, 539 }, { 105, 539 }, { 106, 539 },
 { 107, 539 }, { 108, 539 }, { 109, 539 }, { 110, 539 }, { 111, 539 },
 { 112, 539 }, { 113, 539 }, { 114, 539 }, { 115, 539 }, { 116, 539 },
 { 117, 539 }, { 118, 539 }, { 119, 539 }, { 120, 539 }, { 121, 539 },
 { 122, 539 }, { 123, 539 }, { 124,1156 }, { 125, 539 }, { 126, 539 },
 { 127, 539 }, { 128, 539 }, {   0,   0 }, {   0,3328 }, {   1, 409 },
 {   2, 409 }, {   3, 409 }, {   4, 409 }, {   5, 409 }, {   6, 409 },

 {   7, 409 }, {   8, 409 }, {   9, 409 }, {  10, 411 }, {  11, 409 },
 {  12, 409 }, {  13, 409 }, {  14, 409 }, {  15, 409 }, {  16, 409 },
 {  17, 409 }, {  18, 409 }, {  19, 409 }, {  20, 409 }, {  21, 409 },
 {  22, 409 }, {  23, 409 }, {  24, 409 }, {  25, 409 }, {  26, 409 },
 {  27, 409 }, {  28, 409 }, {  29, 409 }, {  30, 409 }, {  31, 409 },
 {  32, 409 }, {  33, 409 }, {  34, 409 }, {  35, 409 }, {  36, 409 },
 {  37, 409 }, {  38, 409 }, {  39, 409 }, {  40, 409 }, {  41, 409 },
 {  42, 409 }, {  43,1026 }, {  44, 409 }, {  45,1156 }, {  46, 409 },
 {  47, 409 }, {  48, 409 }, {  49, 409 }, {  50, 409 }, {  51, 409 },
 {  52, 409 }, {  53, 409 }, {  54, 409 }, {  55, 409 }, {  56, 409 },

 {  57, 409 }, {  58, 409 }, {  59, 409 }, {  60, 409 }, {  61,1026 },
 {  62, 409 }, {  63, 409 }, {  64, 409 }, {  65, 409 }, {  66, 409 },
 {  67, 409 }, {  68, 409 }, {  69, 409 }, {  70, 409 }, {  71, 409 },
 {  72, 409 }, {  73, 409 }, {  74, 409 }, {  75, 409 }, {  76, 409 },
 {  77, 409 }, {  78, 409 }, {  79, 409 }, {  80, 409 }, {  81, 409 },
 {  82, 409 }, {  83, 409 }, {  84, 409 }, {  85, 409 }, {  86, 409 },
 {  87, 409 }, {  88, 409 }, {  89, 409 }, {  90, 409 }, {  91, 409 },
 {  92, 409 }, {  93, 409 }, {  94, 409 }, {  95, 409 }, {  96, 409 },
 {  97, 409 }, {  98, 409 }, {  99, 409 }, { 100, 409 }, { 101, 409 },
 { 102, 409 }, { 103, 409 }, { 104, 409 }, { 105, 409 }, { 106, 409 },

 { 107, 409 }, { 108, 409 }, { 109, 409 }, { 110, 409 }, { 111, 409 },
 { 112, 409 }, { 113, 409 }, { 114, 409 }, { 115, 409 }, { 116, 409 },
 { 117, 409 }, { 118, 409 }, { 119, 409 }, { 120, 409 }, { 121, 409 },
 { 122, 409 }, { 123, 409 }, { 124,1026 }, { 125, 409 }, { 126, 409 },
 { 127, 409 }, { 128, 409 }, {   0,   0 }, {   0,3198 }, {   1, 260 },
 {   2, 260 }, {   3, 260 }, {   4, 260 }, {   5, 260 }, {   6, 260 },
 {   7, 260 }, {   8, 260 }, {   9, 262 }, {  10, 264 }, {  11, 260 },
 {  12, 260 }, {  13, 260 }, {  14, 260 }, {  15, 260 }, {  16, 260 },
 {  17, 260 }, {  18, 260 }, {  19, 260 }, {  20, 260 }, {  21, 260 },
 {  22, 260 }, {  23, 260 }, {  24, 260 }, {  25, 260 }, {  26, 260 },

 {  27, 260 }, {  28, 260 }, {  29, 260 }, {  30, 260 }, {  31, 260 },
 {  32, 262 }, {  33, 260 }, {  34, 260 }, {  35, 260 }, {  36, 260 },
 {  37, 260 }, {  38, 260 }, {  39, 260 }, {  40, 260 }, {  41, 260 },
 {  42, 260 }, {  43, 260 }, {  44, 260 }, {  45, 260 }, {  46, 260 },
 {  47, 260 }, {  48, 260 }, {  49, 260 }, {  50, 260 }, {  51, 260 },
 {  52, 260 }, {  53, 260 }, {  54, 260 }, {  55, 260 }, {  56, 260 },
 {  57, 260 }, {  58, 260 }, {  59, 260 }, {  60, 260 }, {  61, 260 },
 {  62, 260 }, {  63, 260 }, {  64, 260 }, {  65, 260 }, {  66, 260 },
 {  67, 260 }, {  68, 260 }, {  69, 260 }, {  70, 260 }, {  71, 260 },
 {  72, 260 }, {  73, 260 }, {  74, 260 }, {  75, 260 }, {  76, 260 },

 {  77, 260 }, {  78, 260 }, {  79, 260 }, {  80, 260 }, {  81, 260 },
 {  82, 260 }, {  83, 260 }, {  84, 260 }, {  85, 260 }, {  86, 260 },
 {  87, 260 }, {  88, 260 }, {  89, 260 }, {  90, 260 }, {  91, 260 },
 {  92, 260 }, {  93, 260 }, {  94, 260 }, {  95, 260 }, {  96, 260 },
 {  97, 260 }, {  98, 260 }, {  99, 260 }, { 100, 260 }, { 101, 260 },
 { 102, 260 }, { 103, 260 }, { 104, 260 }, { 105, 260 }, { 106, 260 },
 { 107, 260 }, { 108, 260 }, { 109, 260 }, { 110, 260 }, { 111, 260 },
 { 112, 260 }, { 113, 260 }, { 114, 260 }, { 115, 260 }, { 116, 260 },
 { 117, 260 }, { 118, 260 }, { 119, 260 }, { 120, 260 }, { 121, 260 },
 { 122, 260 }, { 123, 260 }, { 124, 260 }, { 125, 260 }, { 126, 260 },

 { 127, 260 }, { 128, 260 }, {   0,   0 }, {   0,3068 }, {   1, 130 },
 {   2, 130 }, {   3, 130 }, {   4, 130 }, {   5, 130 }, {   6, 130 },
 {   7, 130 }, {   8, 130 }, {   9, 132 }, {  10, 134 }, {  11, 130 },
 {  12, 130 }, {  13, 130 }, {  14, 130 }, {  15, 130 }, {  16, 130 },
 {  17, 130 }, {  18, 130 }, {  19, 130 }, {  20, 130 }, {  21, 130 },
 {  22, 130 }, {  23, 130 }, {  24, 130 }, {  25, 130 }, {  26, 130 },
 {  27, 130 }, {  28, 130 }, {  29, 130 }, {  30, 130 }, {  31, 130 },
 {  32, 132 }, {  33, 130 }, {  34, 130 }, {  35, 130 }, {  36, 130 },
 {  37, 130 }, {  38, 130 }, {  39, 130 }, {  40, 130 }, {  41, 130 },
 {  42, 130 }, {  43, 130 }, {  44, 130 }, {  45, 130 }, {  46, 130 },

 {  47, 130 }, {  48, 130 }, {  49, 130 }, {  50, 130 }, {  51, 130 },
 {  52, 130 }, {  53, 130 }, {  54, 130 }, {  55, 130 }, {  56, 130 },
 {  57, 130 }, {  58, 130 }, {  59, 130 }, {  60, 130 }, {  61, 130 },
 {  62, 130 }, {  63, 130 }, {  64, 130 }, {  65, 130 }, {  66, 130 },
 {  67, 130 }, {  68, 130 }, {  69, 130 }, {  70, 130 }, {  71, 130 },
 {  72, 130 }, {  73, 130 }, {  74, 130 }, {  75, 130 }, {  76, 130 },
 {  77, 130 }, {  78, 130 }, {  79, 130 }, {  80, 130 }, {  81, 130 },
 {  82, 130 }, {  83, 130 }, {  84, 130 }, {  85, 130 }, {  86, 130 },
 {  87, 130 }, {  88, 130 }, {  89, 130 }, {  90, 130 }, {  91, 130 },
 {  92, 130 }, {  93, 130 }, {  94, 130 }, {  95, 130 }, {  96, 130 },

 {  97, 130 }, {  98, 130 }, {  99, 130 }, { 100, 130 }, { 101, 130 },
 { 102, 130 }, { 103, 130 }, { 104, 130 }, { 105, 130 }, { 106, 130 },
 { 107, 130 }, { 108, 130 }, { 109, 130 }, { 110, 130 }, { 111, 130 },
 { 112, 130 }, { 113, 130 }, { 114, 130 }, { 115, 130 }, { 116, 130 },
 { 117, 130 }, { 118, 130 }, { 119, 130 }, { 120, 130 }, { 121, 130 },
 { 122, 130 }, { 123, 130 }, { 124, 130 }, { 125, 130 }, { 126, 130 },
 { 127, 130 }, { 128, 130 }, {   0,  17 }, {   0,2938 }, {   0,  15 },
 {   0,2936 }, {   0,  16 }, {   0,2934 }, {   0,   1 }, {   0,2932 },
 {   0,   2 }, {   0,2930 }, {   0,   3 }, {   0,2928 }, {   9, 284 },
 {   0,   5 }, {   0,2925 }, {   0,   7 }, {   0,2923 }, {   0,   6 },

 {   0,2921 }, {   0,  14 }, {   0,2919 }, {   0,  18 }, {   0,2917 },
 {   0,   0 }, {   0,   4 }, {   0,2914 }, {   1, 872 }, {   2, 872 },
 {   3, 872 }, {   4, 872 }, {   5, 872 }, {   6, 872 }, {   7, 872 },
 {   8, 872 }, {   0,   0 }, {  32, 284 }, {  11, 872 }, {  12, 872 },
 {  13, 872 }, {  14, 872 }, {  15, 872 }, {  16, 872 }, {  17, 872 },
 {  18, 872 }, {  19, 872 }, {  20, 872 }, {  21, 872 }, {  22, 872 },
 {  23, 872 }, {  24, 872 }, {  25, 872 }, {  26, 872 }, {  27, 872 },
 {  28, 872 }, {  29, 872 }, {  30, 872 }, {  31, 872 }, {   0,   0 },
 {  33, 872 }, {  34, 872 }, {  35, 872 }, {  36, 872 }, {  37, 872 },
 {  38, 872 }, {  39, 872 }, {   0,   0 }, {   0,   0 }, {  42, 872 },

 {  43, 872 }, {  44, 872 }, {  45, 872 }, {  46, 872 }, {  47, 872 },
 {  48, 872 }, {  49, 872 }, {  50, 872 }, {  51, 872 }, {  52, 872 },
 {  53, 872 }, {  54, 872 }, {  55, 872 }, {  56, 872 }, {  57, 872 },
 {  58, 872 }, {  59, 872 }, {  60, 872 }, {  61, 872 }, {  62, 872 },
 {  63, 872 }, {  64, 872 }, {  65, 872 }, {  66, 872 }, {  67, 872 },
 {  68, 872 }, {  69, 872 }, {  70, 872 }, {  71, 872 }, {  72, 872 },
 {  73, 872 }, {  74, 872 }, {  75, 872 }, {  76, 872 }, {  77, 872 },
 {  78, 872 }, {  79, 872 }, {  80, 872 }, {  81, 872 }, {  82, 872 },
 {  83, 872 }, {  84, 872 }, {  85, 872 }, {  86, 872 }, {  87, 872 },
 {  88, 872 }, {  89, 872 }, {  90, 872 }, {  91, 872 }, {  92, 872 },

 {  93, 872 }, {  94, 872 }, {  95, 872 }, {  96, 872 }, {  97, 872 },
 {  98, 872 }, {  99, 872 }, { 100, 872 }, { 101, 872 }, { 102, 872 },
 { 103, 872 }, { 104, 872 }, { 105, 872 }, { 106, 872 }, { 107, 872 },
 { 108, 872 }, { 109, 872 }, { 110, 872 }, { 111, 872 }, { 112, 872 },
 { 113, 872 }, { 114, 872 }, { 115, 872 }, { 116, 872 }, { 117, 872 },
 { 118, 872 }, { 119, 872 }, { 120, 872 }, { 121, 872 }, { 122, 872 },
 { 123, 872 }, { 124, 872 }, { 125, 872 }, { 126, 872 }, { 127, 872 },
 { 128, 872 }, {   0,  10 }, {   0,2784 }, {   1, 872 }, {   2, 872 },
 {   3, 872 }, {   4, 872 }, {   5, 872 }, {   6, 872 }, {   7, 872 },
 {   8, 872 }, {   0,   0 }, {   0,   0 }, {  11, 872 }, {  12, 872 },

 {  13, 872 }, {  14, 872 }, {  15, 872 }, {  16, 872 }, {  17, 872 },
 {  18, 872 }, {  19, 872 }, {  20, 872 }, {  21, 872 }, {  22, 872 },
 {  23, 872 }, {  24, 872 }, {  25, 872 }, {  26, 872 }, {  27, 872 },
 {  28, 872 }, {  29, 872 }, {  30, 872 }, {  31, 872 }, {   0,   0 },
 {  33, 872 }, {  34, 872 }, {  35, 872 }, {  36, 872 }, {  37, 872 },
 {  38, 872 }, {  39, 872 }, {   0,   0 }, {   0,   0 }, {  42, 872 },
 {  43, 872 }, {  44, 872 }, {  45, 872 }, {  46, 872 }, {  47, 872 },
 {  48, 872 }, {  49, 872 }, {  50, 872 }, {  51, 872 }, {  52, 872 },
 {  53, 872 }, {  54, 872 }, {  55, 872 }, {  56, 872 }, {  57, 872 },
 {  58, 872 }, {  59, 872 }, {  60, 872 }, {  61, 872 }, {  62, 872 },

 {  63, 872 }, {  64, 872 }, {  65, 872 }, {  66, 872 }, {  67, 872 },
 {  68, 872 }, {  69, 872 }, {  70, 872 }, {  71, 872 }, {  72, 872 },
 {  73, 872 }, {  74, 872 }, {  75, 872 }, {  76, 872 }, {  77, 872 },
 {  78, 872 }, {  79, 872 }, {  80, 872 }, {  81, 872 }, {  82, 872 },
 {  83, 872 }, {  84, 872 }, {  85, 872 }, {  86, 872 }, {  87, 872 },
 {  88, 872 }, {  89, 872 }, {  90, 872 }, {  91, 872 }, {  92, 872 },
 {  93, 872 }, {  94, 872 }, {  95, 872 }, {  96, 872 }, {  97, 872 },
 {  98, 872 }, {  99, 872 }, { 100, 872 }, { 101, 872 }, { 102, 872 },
 { 103, 872 }, { 104, 872 }, { 105, 872 }, { 106, 872 }, { 107, 872 },
 { 108, 872 }, { 109, 872 }, { 110, 872 }, { 111, 872 }, { 112, 872 },

 { 113, 872 }, { 114, 872 }, { 115, 872 }, { 116, 872 }, { 117, 872 },
 { 118, 872 }, { 119, 872 }, { 120, 872 }, { 121, 872 }, { 122, 872 },
 { 123, 872 }, { 124, 872 }, { 125, 872 }, { 126, 872 }, { 127, 872 },
 { 128, 872 }, {   0,   9 }, {   0,2654 }, {   0,  15 }, {   0,2652 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  32,   0 }, {   0,   0 }, {  36, 872 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  42, 872 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 964 }, {   0,   0 },
 {  48, 872 }, {  49, 872 }, {  50, 872 }, {  51, 872 }, {  52, 872 },
 {  53, 872 }, {  54, 872 }, {  55, 872 }, {  56, 872 }, {  57, 872 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  63, 872 }, {   0,   0 }, {  65, 872 }, {  66, 872 }, {  67, 872 },
 {  68, 872 }, {  69, 872 }, {  70, 872 }, {  71, 872 }, {  72, 872 },
 {  73, 872 }, {  74, 872 }, {  75, 872 }, {  76, 872 }, {  77, 872 },
 {  78, 872 }, {  79, 872 }, {  80, 872 }, {  81, 872 }, {  82, 872 },

 {  83, 872 }, {  84, 872 }, {  85, 872 }, {  86, 872 }, {  87, 872 },
 {  88, 872 }, {  89, 872 }, {  90, 872 }, {   0,  10 }, {   0,2562 },
 {   1, 650 }, {   2, 650 }, {   3, 650 }, {   4, 650 }, {   5, 650 },
 {   6, 650 }, {   7, 650 }, {   8, 650 }, {   0,   0 }, {   0,   0 },
 {  11, 650 }, {  12, 650 }, {  13, 650 }, {  14, 650 }, {  15, 650 },
 {  16, 650 }, {  17, 650 }, {  18, 650 }, {  19, 650 }, {  20, 650 },
 {  21, 650 }, {  22, 650 }, {  23, 650 }, {  24, 650 }, {  25, 650 },
 {  26, 650 }, {  27, 650 }, {  28, 650 }, {  29, 650 }, {  30, 650 },
 {  31, 650 }, {   0,   0 }, {  33, 650 }, {  34, 650 }, {  35, 650 },
 {  36, 650 }, {  37, 650 }, {  38, 650 }, {  39, 650 }, {   0,   0 },

 {   0,   0 }, {  42, 650 }, {  43, 650 }, {  44, 650 }, {  45, 650 },
 {  46, 650 }, {  47, 650 }, {  48, 650 }, {  49, 650 }, {  50, 650 },
 {  51, 650 }, {  52, 650 }, {  53, 650 }, {  54, 650 }, {  55, 650 },
 {  56, 650 }, {  57, 650 }, {  58, 650 }, {  59, 650 }, {  60, 650 },
 {  61, 650 }, {  62, 650 }, {  63, 650 }, {  64, 650 }, {  65, 650 },
 {  66, 650 }, {  67, 650 }, {  68, 650 }, {  69, 650 }, {  70, 650 },
 {  71, 650 }, {  72, 650 }, {  73, 650 }, {  74, 650 }, {  75, 650 },
 {  76, 650 }, {  77, 650 }, {  78,1002 }, {  79, 650 }, {  80, 650 },
 {  81, 650 }, {  82, 650 }, {  83, 650 }, {  84, 650 }, {  85, 650 },
 {  86, 650 }, {  87, 650 }, {  88, 650 }, {  89, 650 }, {  90, 650 },

 {  91, 650 }, {  92, 650 }, {  93, 650 }, {  94, 650 }, {  95, 650 },
 {  96, 650 }, {  97, 650 }, {  98, 650 }, {  99, 650 }, { 100, 650 },
 { 101, 650 }, { 102, 650 }, { 103, 650 }, { 104, 650 }, { 105, 650 },
 { 106, 650 }, { 107, 650 }, { 108, 650 }, { 109, 650 }, { 110, 650 },
 { 111, 650 }, { 112, 650 }, { 113, 650 }, { 114, 650 }, { 115, 650 },
 { 116, 650 }, { 117, 650 }, { 118, 650 }, { 119, 650 }, { 120, 650 },
 { 121, 650 }, { 122, 650 }, { 123, 650 }, { 124, 650 }, { 125, 650 },
 { 126, 650 }, { 127, 650 }, { 128, 650 }, {   0,   9 }, {   0,2432 },
 {   1, 520 }, {   2, 520 }, {   3, 520 }, {   4, 520 }, {   5, 520 },
 {   6, 520 }, {   7, 520 }, {   8, 520 }, {   0,   0 }, {   0,   0 },

 {  11, 520 }, {  12, 520 }, {  13, 520 }, {  14, 520 }, {  15, 520 },
 {  16, 520 }, {  17, 520 }, {  18, 520 }, {  19, 520 }, {  20, 520 },
 {  21, 520 }, {  22, 520 }, {  23, 520 }, {  24, 520 }, {  25, 520 },
 {  26, 520 }, {  27, 520 }, {  28, 520 }, {  29, 520 }, {  30, 520 },
 {  31, 520 }, {   0,   0 }, {  33, 520 }, {  34, 520 }, {  35, 520 },
 {  36,1002 }, {  37, 520 }, {  38, 520 }, {  39, 520 }, {   0,   0 },
 {   0,   0 }, {  42,1002 }, {  43, 520 }, {  44, 520 }, {  45, 520 },
 {  46,1132 }, {  47, 520 }, {  48,1002 }, {  49,1002 }, {  50,1002 },
 {  51,1002 }, {  52,1002 }, {  53,1002 }, {  54,1002 }, {  55,1002 },
 {  56,1002 }, {  57,1002 }, {  58, 520 }, {  59, 520 }, {  60, 520 },

 {  61, 520 }, {  62, 520 }, {  63,1002 }, {  64, 520 }, {  65,1002 },
 {  66,1002 }, {  67,1002 }, {  68,1002 }, {  69,1002 }, {  70,1002 },
 {  71,1002 }, {  72,1002 }, {  73,1002 }, {  74,1002 }, {  75,1002 },
 {  76,1002 }, {  77,1002 }, {  78,1002 }, {  79,1002 }, {  80,1002 },
 {  81,1002 }, {  82,1002 }, {  83,1002 }, {  84,1002 }, {  85,1002 },
 {  86,1002 }, {  87,1002 }, {  88,1002 }, {  89,1002 }, {  90,1002 },
 {  91, 520 }, {  92, 520 }, {  93, 520 }, {  94, 520 }, {  95, 520 },
 {  96, 520 }, {  97, 520 }, {  98, 520 }, {  99, 520 }, { 100, 520 },
 { 101, 520 }, { 102, 520 }, { 103, 520 }, { 104, 520 }, { 105, 520 },
 { 106, 520 }, { 107, 520 }, { 108, 520 }, { 109, 520 }, { 110, 520 },

 { 111, 520 }, { 112, 520 }, { 113, 520 }, { 114, 520 }, { 115, 520 },
 { 116, 520 }, { 117, 520 }, { 118, 520 }, { 119, 520 }, { 120, 520 },
 { 121, 520 }, { 122, 520 }, { 123, 520 }, { 124, 520 }, { 125, 520 },
 { 126, 520 }, { 127, 520 }, { 128, 520 }, {   0,  14 }, {   0,2302 },
 {   1,1132 }, {   2,1132 }, {   3,1132 }, {   4,1132 }, {   5,1132 },
 {   6,1132 }, {   7,1132 }, {   8,1132 }, {   0,   0 }, {   0,   0 },
 {  11,1132 }, {  12,1132 }, {  13,1132 }, {  14,1132 }, {  15,1132 },
 {  16,1132 }, {  17,1132 }, {  18,1132 }, {  19,1132 }, {  20,1132 },
 {  21,1132 }, {  22,1132 }, {  23,1132 }, {  24,1132 }, {  25,1132 },
 {  26,1132 }, {  27,1132 }, {  28,1132 }, {  29,1132 }, {  30,1132 },

 {  31,1132 }, {   0,   0 }, {  33,1132 }, {  34,1132 }, {  35,1132 },
 {  36,1132 }, {  37,1132 }, {  38,1132 }, {  39,1132 }, {   0,   0 },
 {   0,   0 }, {  42,1132 }, {  43,1132 }, {  44,1132 }, {   0,   0 },
 {  46,1132 }, {  47,1132 }, {  48,1132 }, {  49,1132 }, {  50,1132 },
 {  51,1132 }, {  52,1132 }, {  53,1132 }, {  54,1132 }, {  55,1132 },
 {  56,1132 }, {  57,1132 }, {  58,1132 }, {  59,1132 }, {  60,1132 },
 {  61,1132 }, {  62,1132 }, {  63,1132 }, {  64,1132 }, {  65,1132 },
 {  66,1132 }, {  67,1132 }, {  68,1132 }, {  69,1132 }, {  70,1132 },
 {  71,1132 }, {  72,1132 }, {  73,1132 }, {  74,1132 }, {  75,1132 },
 {  76,1132 }, {  77,1132 }, {  78,1132 }, {  79,1132 }, {  80,1132 },

 {  81,1132 }, {  82,1132 }, {  83,1132 }, {  84,1132 }, {  85,1132 },
 {  86,1132 }, {  87,1132 }, {  88,1132 }, {  89,1132 }, {  90,1132 },
 {  91,1132 }, {  92,1132 }, {  93,1132 }, {  94,1132 }, {  95,1132 },
 {  96,1132 }, {  97,1132 }, {  98,1132 }, {  99,1132 }, { 100,1132 },
 { 101,1132 }, { 102,1132 }, { 103,1132 }, { 104,1132 }, { 105,1132 },
 { 106,1132 }, { 107,1132 }, { 108,1132 }, { 109,1132 }, { 110,1132 },
 { 111,1132 }, { 112,1132 }, { 113,1132 }, { 114,1132 }, { 115,1132 },
 { 116,1132 }, { 117,1132 }, { 118,1132 }, { 119,1132 }, { 120,1132 },
 { 121,1132 }, { 122,1132 }, { 123,1132 }, { 124,1132 }, { 125,1132 },
 { 126,1132 }, { 127,1132 }, { 128,1132 }, {   0,  14 }, {   0,2172 },

 {   1,1002 }, {   2,1002 }, {   3,1002 }, {   4,1002 }, {   5,1002 },
 {   6,1002 }, {   7,1002 }, {   8,1002 }, {   0,   0 }, {   0,   0 },
 {  11,1002 }, {  12,1002 }, {  13,1002 }, {  14,1002 }, {  15,1002 },
 {  16,1002 }, {  17,1002 }, {  18,1002 }, {  19,1002 }, {  20,1002 },
 {  21,1002 }, {  22,1002 }, {  23,1002 }, {  24,1002 }, {  25,1002 },
 {  26,1002 }, {  27,1002 }, {  28,1002 }, {  29,1002 }, {  30,1002 },
 {  31,1002 }, {   0,   0 }, {  33,1002 }, {  34,1002 }, {  35,1002 },
 {  36,1002 }, {  37,1002 }, {  38,1002 }, {  39,1002 }, {   0,   0 },
 {   0,   0 }, {  42,1002 }, {  43,1002 }, {  44,1002 }, {   0,   0 },
 {  46,1002 }, {  47,1002 }, {  48,1132 }, {  49,1132 }, {  50,1132 },

 {  51,1132 }, {  52,1132 }, {  53,1132 }, {  54,1132 }, {  55,1132 },
 {  56,1132 }, {  57,1132 }, {  58,1002 }, {  59,1002 }, {  60,1002 },
 {  61,1002 }, {  62,1002 }, {  63,1002 }, {  64,1002 }, {  65,1262 },
 {  66,1262 }, {  67,1262 }, {  68,1262 }, {  69,1262 }, {  70,1262 },
 {  71,1262 }, {  72,1262 }, {  73,1262 }, {  74,1262 }, {  75,1262 },
 {  76,1262 }, {  77,1262 }, {  78,1262 }, {  79,1262 }, {  80,1262 },
 {  81,1262 }, {  82,1262 }, {  83,1262 }, {  84,1262 }, {  85,1262 },
 {  86,1262 }, {  87,1262 }, {  88,1262 }, {  89,1262 }, {  90,1262 },
 {  91,1002 }, {  92,1002 }, {  93,1002 }, {  94,1002 }, {  95,1002 },
 {  96,1002 }, {  97,1002 }, {  98,1002 }, {  99,1002 }, { 100,1002 },

 { 101,1002 }, { 102,1002 }, { 103,1002 }, { 104,1002 }, { 105,1002 },
 { 106,1002 }, { 107,1002 }, { 108,1002 }, { 109,1002 }, { 110,1002 },
 { 111,1002 }, { 112,1002 }, { 113,1002 }, { 114,1002 }, { 115,1002 },
 { 116,1002 }, { 117,1002 }, { 118,1002 }, { 119,1002 }, { 120,1002 },
 { 121,1002 }, { 122,1002 }, { 123,1002 }, { 124,1002 }, { 125,1002 },
 { 126,1002 }, { 127,1002 }, { 128,1002 }, {   0,   4 }, {   0,2042 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },

 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {   0,   0 },
 {   0,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },

 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },

 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,  10 }, {   0,1912 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   0,   0 }, {   0,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {   0,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {   0,   0 },

 {   0,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },

 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, {   0,   9 }, {   0,1782 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  36,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  42,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46,  92 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  63,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0,1690 }, {   1, 910 }, {   2, 910 }, {   3, 910 },
 {   4, 910 }, {   5, 910 }, {   6, 910 }, {   7, 910 }, {   8, 910 },
 {   0,   0 }, {   0,   0 }, {  11, 910 }, {  12, 910 }, {  13, 910 },
 {  14, 910 }, {  15, 910 }, {  16, 910 }, {  17, 910 }, {  18, 910 },

 {  19, 910 }, {  20, 910 }, {  21, 910 }, {  22, 910 }, {  23, 910 },
 {  24, 910 }, {  25, 910 }, {  26, 910 }, {  27, 910 }, {  28, 910 },
 {  29, 910 }, {  30, 910 }, {  31, 910 }, {   0,   0 }, {  33, 910 },
 {  34, 910 }, {  35, 910 }, {  36, 910 }, {  37, 910 }, {  38, 910 },
 {  39, 910 }, {   0,   0 }, {   0,   0 }, {  42, 910 }, {  43, 910 },
 {  44, 910 }, {  45, 910 }, {  46, 910 }, {  47, 910 }, {  48, 910 },
 {  49, 910 }, {  50, 910 }, {  51, 910 }, {  52, 910 }, {  53, 910 },
 {  54, 910 }, {  55, 910 }, {  56, 910 }, {  57, 910 }, {  58, 910 },
 {  59, 910 }, {  60, 910 }, {  61, 910 }, {  62, 910 }, {  63, 910 },
 {  64, 910 }, {  65, 910 }, {  66, 910 }, {  67, 910 }, {  68, 910 },

 {  69, 910 }, {  70, 910 }, {  71, 910 }, {  72, 910 }, {  73, 910 },
 {  74, 910 }, {  75, 910 }, {  76, 910 }, {  77, 910 }, {  78, 910 },
 {  79, 910 }, {  80, 910 }, {  81, 910 }, {  82, 910 }, {  83, 910 },
 {  84, 910 }, {  85, 910 }, {  86, 910 }, {  87, 910 }, {  88, 910 },
 {  89, 910 }, {  90, 910 }, {  91, 910 }, {  92, 910 }, {  93, 910 },
 {  94, 910 }, {  95, 910 }, {  96, 910 }, {  97, 910 }, {  98, 910 },
 {  99, 910 }, { 100, 910 }, { 101, 910 }, { 102, 910 }, { 103, 910 },
 { 104, 910 }, { 105, 910 }, { 106, 910 }, { 107, 910 }, { 108, 910 },
 { 109, 910 }, { 110, 910 }, { 111, 910 }, { 112, 910 }, { 113, 910 },
 { 114, 910 }, { 115, 910 }, { 116, 910 }, { 117, 910 }, { 118, 910 },

 { 119, 910 }, { 120, 910 }, { 121, 910 }, { 122, 910 }, { 123, 910 },
 { 124, 910 }, { 125, 910 }, { 126, 910 }, { 127, 910 }, { 128, 910 },
 {   0,  10 }, {   0,1560 }, {   1,-352 }, {   2,-352 }, {   3,-352 },
 {   4,-352 }, {   5,-352 }, {   6,-352 }, {   7,-352 }, {   8,-352 },
 {   0,   0 }, {   0,   0 }, {  11,-352 }, {  12,-352 }, {  13,-352 },
 {  14,-352 }, {  15,-352 }, {  16,-352 }, {  17,-352 }, {  18,-352 },
 {  19,-352 }, {  20,-352 }, {  21,-352 }, {  22,-352 }, {  23,-352 },
 {  24,-352 }, {  25,-352 }, {  26,-352 }, {  27,-352 }, {  28,-352 },
 {  29,-352 }, {  30,-352 }, {  31,-352 }, {   0,   0 }, {  33,-352 },
 {  34,-352 }, {  35,-352 }, {  36,-352 }, {  37,-352 }, {  38,-352 },

 {  39,-352 }, {   0,   0 }, {   0,   0 }, {  42,-352 }, {  43,-352 },
 {  44,-352 }, {  45,-352 }, {  46,-352 }, {  47,-352 }, {  48,-352 },
 {  49,-352 }, {  50,-352 }, {  51,-352 }, {  52,-352 }, {  53,-352 },
 {  54,-352 }, {  55,-352 }, {  56,-352 }, {  57,-352 }, {  58,-352 },
 {  59,-352 }, {  60,-352 }, {  61,-352 }, {  62,-352 }, {  63,-352 },
 {  64,-352 }, {  65,-352 }, {  66,-352 }, {  67,-352 }, {  68,-352 },
 {  69,-352 }, {  70,-352 }, {  71,-352 }, {  72,-352 }, {  73,-352 },
 {  74,-352 }, {  75,-352 }, {  76,-352 }, {  77,-352 }, {  78,-352 },
 {  79, 910 }, {  80,-352 }, {  81,-352 }, {  82,-352 }, {  83,-352 },
 {  84,-352 }, {  85,-352 }, {  86,-352 }, {  87,-352 }, {  88,-352 },

 {  89,-352 }, {  90,-352 }, {  91,-352 }, {  92,-352 }, {  93,-352 },
 {  94,-352 }, {  95,-352 }, {  96,-352 }, {  97,-352 }, {  98,-352 },
 {  99,-352 }, { 100,-352 }, { 101,-352 }, { 102,-352 }, { 103,-352 },
 { 104,-352 }, { 105,-352 }, { 106,-352 }, { 107,-352 }, { 108,-352 },
 { 109,-352 }, { 110,-352 }, { 111,-352 }, { 112,-352 }, { 113,-352 },
 { 114,-352 }, { 115,-352 }, { 116,-352 }, { 117,-352 }, { 118,-352 },
 { 119,-352 }, { 120,-352 }, { 121,-352 }, { 122,-352 }, { 123,-352 },
 { 124,-352 }, { 125,-352 }, { 126,-352 }, { 127,-352 }, { 128,-352 },
 {   0,   9 }, {   0,1430 }, {   1,-482 }, {   2,-482 }, {   3,-482 },
 {   4,-482 }, {   5,-482 }, {   6,-482 }, {   7,-482 }, {   8,-482 },

 {   0,   0 }, {   0,   0 }, {  11,-482 }, {  12,-482 }, {  13,-482 },
 {  14,-482 }, {  15,-482 }, {  16,-482 }, {  17,-482 }, {  18,-482 },
 {  19,-482 }, {  20,-482 }, {  21,-482 }, {  22,-482 }, {  23,-482 },
 {  24,-482 }, {  25,-482 }, {  26,-482 }, {  27,-482 }, {  28,-482 },
 {  29,-482 }, {  30,-482 }, {  31,-482 }, {   0,   0 }, {  33,-482 },
 {  34,-482 }, {  35,-482 }, {  36,   0 }, {  37,-482 }, {  38,-482 },
 {  39,-482 }, {   0,   0 }, {   0,   0 }, {  42,   0 }, {  43,-482 },
 {  44,-482 }, {  45,-482 }, {  46, 130 }, {  47,-482 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,-482 },

 {  59,-482 }, {  60,-482 }, {  61,-482 }, {  62,-482 }, {  63,   0 },
 {  64,-482 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,-482 }, {  92,-482 }, {  93,-482 },
 {  94,-482 }, {  95,-482 }, {  96,-482 }, {  97,-482 }, {  98,-482 },
 {  99,-482 }, { 100,-482 }, { 101,-482 }, { 102,-482 }, { 103,-482 },
 { 104,-482 }, { 105,-482 }, { 106,-482 }, { 107,-482 }, { 108,-482 },

 { 109,-482 }, { 110,-482 }, { 111,-482 }, { 112,-482 }, { 113,-482 },
 { 114,-482 }, { 115,-482 }, { 116,-482 }, { 117,-482 }, { 118,-482 },
 { 119,-482 }, { 120,-482 }, { 121,-482 }, { 122,-482 }, { 123,-482 },
 { 124,-482 }, { 125,-482 }, { 126,-482 }, { 127,-482 }, { 128,-482 },
 {   0,  10 }, {   0,1300 }, {   1, 780 }, {   2, 780 }, {   3, 780 },
 {   4, 780 }, {   5, 780 }, {   6, 780 }, {   7, 780 }, {   8, 780 },
 {   0,   0 }, {   0,   0 }, {  11, 780 }, {  12, 780 }, {  13, 780 },
 {  14, 780 }, {  15, 780 }, {  16, 780 }, {  17, 780 }, {  18, 780 },
 {  19, 780 }, {  20, 780 }, {  21, 780 }, {  22, 780 }, {  23, 780 },
 {  24, 780 }, {  25, 780 }, {  26, 780 }, {  27, 780 }, {  28, 780 },

 {  29, 780 }, {  30, 780 }, {  31, 780 }, {   0,   0 }, {  33, 780 },
 {  34, 780 }, {  35, 780 }, {  36, 780 }, {  37, 780 }, {  38, 780 },
 {  39, 780 }, {   0,   0 }, {   0,   0 }, {  42, 780 }, {  43, 780 },
 {  44, 780 }, {  45, 780 }, {  46, 780 }, {  47, 780 }, {  48, 780 },
 {  49, 780 }, {  50, 780 }, {  51, 780 }, {  52, 780 }, {  53, 780 },
 {  54, 780 }, {  55, 780 }, {  56, 780 }, {  57, 780 }, {  58, 780 },
 {  59, 780 }, {  60, 780 }, {  61, 780 }, {  62, 780 }, {  63, 780 },
 {  64, 780 }, {  65, 780 }, {  66, 780 }, {  67, 780 }, {  68, 780 },
 {  69, 780 }, {  70, 780 }, {  71, 780 }, {  72, 780 }, {  73, 780 },
 {  74, 780 }, {  75, 780 }, {  76, 780 }, {  77, 780 }, {  78, 780 },

 {  79, 780 }, {  80, 780 }, {  81, 780 }, {  82, 780 }, {  83, 780 },
 {  84, 780 }, {  85, 780 }, {  86, 780 }, {  87, 780 }, {  88, 780 },
 {  89, 780 }, {  90, 780 }, {  91, 780 }, {  92, 780 }, {  93, 780 },
 {  94, 780 }, {  95, 780 }, {  96, 780 }, {  97, 780 }, {  98, 780 },
 {  99, 780 }, { 100, 780 }, { 101, 780 }, { 102, 780 }, { 103, 780 },
 { 104, 780 }, { 105, 780 }, { 106, 780 }, { 107, 780 }, { 108, 780 },
 { 109, 780 }, { 110, 780 }, { 111, 780 }, { 112, 780 }, { 113, 780 },
 { 114, 780 }, { 115, 780 }, { 116, 780 }, { 117, 780 }, { 118, 780 },
 { 119, 780 }, { 120, 780 }, { 121, 780 }, { 122, 780 }, { 123, 780 },
 { 124, 780 }, { 125, 780 }, { 126, 780 }, { 127, 780 }, { 128, 780 },

 {   0,  13 }, {   0,1170 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   0,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {   0,   0 }, {   0,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {   0,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },

 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },

 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,  11 }, {   0,1040 }, {   1,-130 }, {   2,-130 }, {   3,-130 },
 {   4,-130 }, {   5,-130 }, {   6,-130 }, {   7,-130 }, {   8,-130 },
 {   0,   0 }, {   0,   0 }, {  11,-130 }, {  12,-130 }, {  13,-130 },
 {  14,-130 }, {  15,-130 }, {  16,-130 }, {  17,-130 }, {  18,-130 },

 {  19,-130 }, {  20,-130 }, {  21,-130 }, {  22,-130 }, {  23,-130 },
 {  24,-130 }, {  25,-130 }, {  26,-130 }, {  27,-130 }, {  28,-130 },
 {  29,-130 }, {  30,-130 }, {  31,-130 }, {   0,   0 }, {  33,-130 },
 {  34,-130 }, {  35,-130 }, {  36,-130 }, {  37,-130 }, {  38,-130 },
 {  39,-130 }, {   0,   0 }, {   0,   0 }, {  42,-130 }, {  43,-130 },
 {  44,-130 }, {   0,   0 }, {  46,-130 }, {  47,-130 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,-130 },
 {  59,-130 }, {  60,-130 }, {  61,-130 }, {  62,-130 }, {  63,-130 },
 {  64,-130 }, {  65,-130 }, {  66,-130 }, {  67,-130 }, {  68,-130 },

 {  69,-130 }, {  70,-130 }, {  71,-130 }, {  72,-130 }, {  73,-130 },
 {  74,-130 }, {  75,-130 }, {  76,-130 }, {  77,-130 }, {  78,-130 },
 {  79,-130 }, {  80,-130 }, {  81,-130 }, {  82,-130 }, {  83,-130 },
 {  84,-130 }, {  85,-130 }, {  86,-130 }, {  87,-130 }, {  88,-130 },
 {  89,-130 }, {  90,-130 }, {  91,-130 }, {  92,-130 }, {  93,-130 },
 {  94,-130 }, {  95,-130 }, {  96,-130 }, {  97,-130 }, {  98,-130 },
 {  99,-130 }, { 100,-130 }, { 101,-130 }, { 102,-130 }, { 103,-130 },
 { 104,-130 }, { 105,-130 }, { 106,-130 }, { 107,-130 }, { 108,-130 },
 { 109,-130 }, { 110,-130 }, { 111,-130 }, { 112,-130 }, { 113,-130 },
 { 114,-130 }, { 115,-130 }, { 116,-130 }, { 117,-130 }, { 118,-130 },

 { 119,-130 }, { 120,-130 }, { 121,-130 }, { 122,-130 }, { 123,-130 },
 { 124,-130 }, { 125,-130 }, { 126,-130 }, { 127,-130 }, { 128,-130 },
 {   0,  12 }, {   0, 910 }, {   1,-260 }, {   2,-260 }, {   3,-260 },
 {   4,-260 }, {   5,-260 }, {   6,-260 }, {   7,-260 }, {   8,-260 },
 {   0,   0 }, {   0,   0 }, {  11,-260 }, {  12,-260 }, {  13,-260 },
 {  14,-260 }, {  15,-260 }, {  16,-260 }, {  17,-260 }, {  18,-260 },
 {  19,-260 }, {  20,-260 }, {  21,-260 }, {  22,-260 }, {  23,-260 },
 {  24,-260 }, {  25,-260 }, {  26,-260 }, {  27,-260 }, {  28,-260 },
 {  29,-260 }, {  30,-260 }, {  31,-260 }, {   0,   0 }, {  33,-260 },
 {  34,-260 }, {  35,-260 }, {  36,-260 }, {  37,-260 }, {  38,-260 },

 {  39,-260 }, {   0,   0 }, {   0,   0 }, {  42,-260 }, {  43,-260 },
 {  44,-260 }, {   0,   0 }, {  46,-260 }, {  47,-260 }, {  48,-260 },
 {  49,-260 }, {  50,-260 }, {  51,-260 }, {  52,-260 }, {  53,-260 },
 {  54,-260 }, {  55,-260 }, {  56,-260 }, {  57,-260 }, {  58,-260 },
 {  59,-260 }, {  60,-260 }, {  61,-260 }, {  62,-260 }, {  63,-260 },
 {  64,-260 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },

 {  89,   0 }, {  90,   0 }, {  91,-260 }, {  92,-260 }, {  93,-260 },
 {  94,-260 }, {  95,-260 }, {  96,-260 }, {  97,-260 }, {  98,-260 },
 {  99,-260 }, { 100,-260 }, { 101,-260 }, { 102,-260 }, { 103,-260 },
 { 104,-260 }, { 105,-260 }, { 106,-260 }, { 107,-260 }, { 108,-260 },
 { 109,-260 }, { 110,-260 }, { 111,-260 }, { 112,-260 }, { 113,-260 },
 { 114,-260 }, { 115,-260 }, { 116,-260 }, { 117,-260 }, { 118,-260 },
 { 119,-260 }, { 120,-260 }, { 121,-260 }, { 122,-260 }, { 123,-260 },
 { 124,-260 }, { 125,-260 }, { 126,-260 }, { 127,-260 }, { 128,-260 },
 {   0,   9 }, {   0, 780 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },

 {   0,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {   0,   0 }, {   0,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },

 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },

 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,  10 }, {   0, 650 }, {   1,-1262 }, {   2,-1262 }, {   3,-1262 },
 {   4,-1262 }, {   5,-1262 }, {   6,-1262 }, {   7,-1262 }, {   8,-1262 },
 {   0,   0 }, {   0,   0 }, {  11,-1262 }, {  12,-1262 }, {  13,-1262 },
 {  14,-1262 }, {  15,-1262 }, {  16,-1262 }, {  17,-1262 }, {  18,-1262 },
 {  19,-1262 }, {  20,-1262 }, {  21,-1262 }, {  22,-1262 }, {  23,-1262 },
 {  24,-1262 }, {  25,-1262 }, {  26,-1262 }, {  27,-1262 }, {  28,-1262 },

 {  29,-1262 }, {  30,-1262 }, {  31,-1262 }, {   0,   0 }, {  33,-1262 },
 {  34,-1262 }, {  35,-1262 }, {  36,-1262 }, {  37,-1262 }, {  38,-1262 },
 {  39,-1262 }, {   0,   0 }, {   0,   0 }, {  42,-1262 }, {  43,-1262 },
 {  44,-1262 }, {  45,-1262 }, {  46,-1262 }, {  47,-1262 }, {  48,-1262 },
 {  49,-1262 }, {  50,-1262 }, {  51,-1262 }, {  52,-1262 }, {  53,-1262 },
 {  54,-1262 }, {  55,-1262 }, {  56,-1262 }, {  57,-1262 }, {  58,-1262 },
 {  59,-1262 }, {  60,-1262 }, {  61,-1262 }, {  62,-1262 }, {  63,-1262 },
 {  64,-1262 }, {  65,-1262 }, {  66,-1262 }, {  67,-1262 }, {  68,-1262 },
 {  69,-1262 }, {  70,-1262 }, {  71,-1262 }, {  72,-1262 }, {  73,-1262 },
 {  74,-1262 }, {  75,-1262 }, {  76,-1262 }, {  77,-1262 }, {  78, 260 },

 {  79,-1262 }, {  80,-1262 }, {  81,-1262 }, {  82,-1262 }, {  83,-1262 },
 {  84,-1262 }, {  85,-1262 }, {  86,-1262 }, {  87,-1262 }, {  88,-1262 },
 {  89,-1262 }, {  90,-1262 }, {  91,-1262 }, {  92,-1262 }, {  93,-1262 },
 {  94,-1262 }, {  95,-1262 }, {  96,-1262 }, {  97,-1262 }, {  98,-1262 },
 {  99,-1262 }, { 100,-1262 }, { 101,-1262 }, { 102,-1262 }, { 103,-1262 },
 { 104,-1262 }, { 105,-1262 }, { 106,-1262 }, { 107,-1262 }, { 108,-1262 },
 { 109,-1262 }, { 110,-1262 }, { 111,-1262 }, { 112,-1262 }, { 113,-1262 },
 { 114,-1262 }, { 115,-1262 }, { 116,-1262 }, { 117,-1262 }, { 118,-1262 },
 { 119,-1262 }, { 120,-1262 }, { 121,-1262 }, { 122,-1262 }, { 123,-1262 },
 { 124,-1262 }, { 125,-1262 }, { 126,-1262 }, { 127,-1262 }, { 128,-1262 },

 {   0,   9 }, {   0, 520 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   0,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {   0,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {   0,   0 }, {   0,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },

 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },

 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 {   0,  10 }, {   0, 390 }, {   1,-1522 }, {   2,-1522 }, {   3,-1522 },
 {   4,-1522 }, {   5,-1522 }, {   6,-1522 }, {   7,-1522 }, {   8,-1522 },
 {   0,   0 }, {   0,   0 }, {  11,-1522 }, {  12,-1522 }, {  13,-1522 },
 {  14,-1522 }, {  15,-1522 }, {  16,-1522 }, {  17,-1522 }, {  18,-1522 },

 {  19,-1522 }, {  20,-1522 }, {  21,-1522 }, {  22,-1522 }, {  23,-1522 },
 {  24,-1522 }, {  25,-1522 }, {  26,-1522 }, {  27,-1522 }, {  28,-1522 },
 {  29,-1522 }, {  30,-1522 }, {  31,-1522 }, {   0,   0 }, {  33,-1522 },
 {  34,-1522 }, {  35,-1522 }, {  36,-1522 }, {  37,-1522 }, {  38,-1522 },
 {  39,-1522 }, {   0,   0 }, {   0,   0 }, {  42,-1522 }, {  43,-1522 },
 {  44,-1522 }, {  45,-1522 }, {  46,-1522 }, {  47,-1522 }, {  48,-1522 },
 {  49,-1522 }, {  50,-1522 }, {  51,-1522 }, {  52,-1522 }, {  53,-1522 },
 {  54,-1522 }, {  55,-1522 }, {  56,-1522 }, {  57,-1522 }, {  58,-1522 },
 {  59,-1522 }, {  60,-1522 }, {  61,-1522 }, {  62,-1522 }, {  63,-1522 },
 {  64,-1522 }, {  65,-1522 }, {  66,-1522 }, {  67,-1522 }, {  68,-1522 },

 {  69, 130 }, {  70,-1522 }, {  71,-1522 }, {  72,-1522 }, {  73,-1522 },
 {  74,-1522 }, {  75,-1522 }, {  76,-1522 }, {  77,-1522 }, {  78,-1522 },
 {  79,-1522 }, {  80,-1522 }, {  81,-1522 }, {  82,-1522 }, {  83,-1522 },
 {  84,-1522 }, {  85,-1522 }, {  86,-1522 }, {  87,-1522 }, {  88,-1522 },
 {  89,-1522 }, {  90,-1522 }, {  91,-1522 }, {  92,-1522 }, {  93,-1522 },
 {  94,-1522 }, {  95,-1522 }, {  96,-1522 }, {  97,-1522 }, {  98,-1522 },
 {  99,-1522 }, { 100,-1522 }, { 101,-1522 }, { 102,-1522 }, { 103,-1522 },
 { 104,-1522 }, { 105,-1522 }, { 106,-1522 }, { 107,-1522 }, { 108,-1522 },
 { 109,-1522 }, { 110,-1522 }, { 111,-1522 }, { 112,-1522 }, { 113,-1522 },
 { 114,-1522 }, { 115,-1522 }, { 116,-1522 }, { 117,-1522 }, { 118,-1522 },

 { 119,-1522 }, { 120,-1522 }, { 121,-1522 }, { 122,-1522 }, { 123,-1522 },
 { 124,-1522 }, { 125,-1522 }, { 126,-1522 }, { 127,-1522 }, { 128,-1522 },
 {   0,  10 }, {   0, 260 }, {   1,-1652 }, {   2,-1652 }, {   3,-1652 },
 {   4,-1652 }, {   5,-1652 }, {   6,-1652 }, {   7,-1652 }, {   8,-1652 },
 {   0,   0 }, {   0,   0 }, {  11,-1652 }, {  12,-1652 }, {  13,-1652 },
 {  14,-1652 }, {  15,-1652 }, {  16,-1652 }, {  17,-1652 }, {  18,-1652 },
 {  19,-1652 }, {  20,-1652 }, {  21,-1652 }, {  22,-1652 }, {  23,-1652 },
 {  24,-1652 }, {  25,-1652 }, {  26,-1652 }, {  27,-1652 }, {  28,-1652 },
 {  29,-1652 }, {  30,-1652 }, {  31,-1652 }, {   0,   0 }, {  33,-1652 },
 {  34,-1652 }, {  35,-1652 }, {  36,-1652 }, {  37,-1652 }, {  38,-1652 },

 {  39,-1652 }, {   0,   0 }, {   0,   0 }, {  42,-1652 }, {  43,-1652 },
 {  44,-1652 }, {  45, 130 }, {  46,-1652 }, {  47,-1652 }, {  48,-1652 },
 {  49,-1652 }, {  50,-1652 }, {  51,-1652 }, {  52,-1652 }, {  53,-1652 },
 {  54,-1652 }, {  55,-1652 }, {  56,-1652 }, {  57,-1652 }, {  58,-1652 },
 {  59,-1652 }, {  60,-1652 }, {  61,-1652 }, {  62,-1652 }, {  63,-1652 },
 {  64,-1652 }, {  65,-1652 }, {  66,-1652 }, {  67,-1652 }, {  68,-1652 },
 {  69,-1652 }, {  70,-1652 }, {  71,-1652 }, {  72,-1652 }, {  73,-1652 },
 {  74,-1652 }, {  75,-1652 }, {  76,-1652 }, {  77,-1652 }, {  78,-1652 },
 {  79,-1652 }, {  80,-1652 }, {  81,-1652 }, {  82,-1652 }, {  83,-1652 },
 {  84,-1652 }, {  85,-1652 }, {  86,-1652 }, {  87,-1652 }, {  88,-1652 },

 {  89,-1652 }, {  90,-1652 }, {  91,-1652 }, {  92,-1652 }, {  93,-1652 },
 {  94,-1652 }, {  95,-1652 }, {  96,-1652 }, {  97,-1652 }, {  98,-1652 },
 {  99,-1652 }, { 100,-1652 }, { 101,-1652 }, { 102,-1652 }, { 103,-1652 },
 { 104,-1652 }, { 105,-1652 }, { 106,-1652 }, { 107,-1652 }, { 108,-1652 },
 { 109,-1652 }, { 110,-1652 }, { 111,-1652 }, { 112,-1652 }, { 113,-1652 },
 { 114,-1652 }, { 115,-1652 }, { 116,-1652 }, { 117,-1652 }, { 118,-1652 },
 { 119,-1652 }, { 120,-1652 }, { 121,-1652 }, { 122,-1652 }, { 123,-1652 },
 { 124,-1652 }, { 125,-1652 }, { 126,-1652 }, { 127,-1652 }, { 128,-1652 },
 {   0,   8 }, {   0, 130 }, {   1,-1782 }, {   2,-1782 }, {   3,-1782 },
 {   4,-1782 }, {   5,-1782 }, {   6,-1782 }, {   7,-1782 }, {   8,-1782 },

 {   0,   0 }, {   0,   0 }, {  11,-1782 }, {  12,-1782 }, {  13,-1782 },
 {  14,-1782 }, {  15,-1782 }, {  16,-1782 }, {  17,-1782 }, {  18,-1782 },
 {  19,-1782 }, {  20,-1782 }, {  21,-1782 }, {  22,-1782 }, {  23,-1782 },
 {  24,-1782 }, {  25,-1782 }, {  26,-1782 }, {  27,-1782 }, {  28,-1782 },
 {  29,-1782 }, {  30,-1782 }, {  31,-1782 }, {   0,   0 }, {  33,-1782 },
 {  34,-1782 }, {  35,-1782 }, {  36,-1782 }, {  37,-1782 }, {  38,-1782 },
 {  39,-1782 }, {   0,   0 }, {   0,   0 }, {  42,-1782 }, {  43,-1782 },
 {  44,-1782 }, {  45,-1782 }, {  46,-1782 }, {  47,-1782 }, {  48,-1782 },
 {  49,-1782 }, {  50,-1782 }, {  51,-1782 }, {  52,-1782 }, {  53,-1782 },
 {  54,-1782 }, {  55,-1782 }, {  56,-1782 }, {  57,-1782 }, {  58,-1782 },

 {  59,-1782 }, {  60,-1782 }, {  61,-1782 }, {  62,-1782 }, {  63,-1782 },
 {  64,-1782 }, {  65,-1782 }, {  66,-1782 }, {  67,-1782 }, {  68,-1782 },
 {  69,-1782 }, {  70,-1782 }, {  71,-1782 }, {  72,-1782 }, {  73,-1782 },
 {  74,-1782 }, {  75,-1782 }, {  76,-1782 }, {  77,-1782 }, {  78,-1782 },
 {  79,-1782 }, {  80,-1782 }, {  81,-1782 }, {  82,-1782 }, {  83,-1782 },
 {  84,-1782 }, {  85,-1782 }, {  86,-1782 }, {  87,-1782 }, {  88,-1782 },
 {  89,-1782 }, {  90,-1782 }, {  91,-1782 }, {  92,-1782 }, {  93,-1782 },
 {  94,-1782 }, {  95,-1782 }, {  96,-1782 }, {  97,-1782 }, {  98,-1782 },
 {  99,-1782 }, { 100,-1782 }, { 101,-1782 }, { 102,-1782 }, { 103,-1782 },
 { 104,-1782 }, { 105,-1782 }, { 106,-1782 }, { 107,-1782 }, { 108,-1782 },

 { 109,-1782 }, { 110,-1782 }, { 111,-1782 }, { 112,-1782 }, { 113,-1782 },
 { 114,-1782 }, { 115,-1782 }, { 116,-1782 }, { 117,-1782 }, { 118,-1782 },
 { 119,-1782 }, { 120,-1782 }, { 121,-1782 }, { 122,-1782 }, { 123,-1782 },
 { 124,-1782 }, { 125,-1782 }, { 126,-1782 }, { 127,-1782 }, { 128,-1782 },
 { 129,  19 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[17] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[133],
    &yy_transition[263],
    &yy_transition[393],
    &yy_transition[523],
    &yy_transition[653],
    &yy_transition[783],
    &yy_transition[913],
    &yy_transition[1043],
    &yy_transition[1173],
    &yy_transition[1303],
    &yy_transition[1433],
    &yy_transition[1563],
    &yy_transition[1693],
    &yy_transition[1823],
    &yy_transition[1953],


    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "read-tree.l"
#define INITIAL 0
/* read-tree.l
 *
 * (c) Mark Johnson, 7th March 2004, modified 21st October 2004 to read null category label
 */
#line 11 "read-tree.l"
#include "sym.h"
#include "tree.h"

#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <stack>

int readtree_lineno = 1;
const char* readtree_filename = NULL;

static const symbol empty_symbol("");

inline static void message(char* s1, char* s2) {
  fprintf(stderr, "%s:%d: %s %s\n", readtree_filename, readtree_lineno, s1, s2);
}

inline static void downcase(char *s) {
  assert(s != NULL);
  while (*s != '\0') {
    if (isupper(*s))
      *s = tolower(*s);
    ++s;
  }
}

#define YY_DECL static tree* readtree_lex(bool downcase_flag = false)

/* RT  - PTB-style tree root with no label
 * RTC - tree root (with label)
 * FC  - first child subtree or terminal
 * NC  - next child
 * CAT - category from label
 * PC -  post-category junk in label
 * IND - index in label
 */
#define RT 1

#define RTC 2

#define FC 3

#define NC 4

#define CAT 5

#define PC 6

#define IND 7

#line 1514 "read-tree.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 59 "read-tree.l"



  tree* root;           /* tree's root node */
  std::stack<tree*> s;  /* stack of tree node ptrs */


#line 1660 "read-tree.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos + 1;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 66 "read-tree.l"
assert(s.empty()); s.push(root = new tree); s.top()->label.cat = tree::label_type::root(); BEGIN(FC); 
	YY_BREAK
case YY_STATE_EOF(RT):
#line 67 "read-tree.l"
assert(s.empty()); return NULL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "read-tree.l"
assert(s.empty()); s.push(root = new tree); BEGIN(CAT);
	YY_BREAK
case YY_STATE_EOF(RTC):
#line 70 "read-tree.l"
assert(s.empty()); return NULL;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "read-tree.l"
assert(!s.empty()); s.push(s.top()->child = new tree); BEGIN(CAT); 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "read-tree.l"
{ assert(!s.empty()); s.push(s.top()->child = new tree); 
                          if (downcase_flag)
			   downcase(readtreetext);
			  s.top()->label.cat = symbol(readtreetext); 
			  BEGIN(NC);
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "read-tree.l"
assert(!s.empty()); s.pop(); if (s.size() == 1) return root; BEGIN(NC);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "read-tree.l"
assert(!s.empty()); s.pop(); if (s.size() == 1) return root;  
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "read-tree.l"
assert(!s.empty()); s.top() = s.top()->next = new tree; BEGIN(CAT); 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 "read-tree.l"
{ assert(!s.empty());  
                          s.top()->label.cat = symbol(readtreetext);
			  s.push(s.top()->child = new tree);
                         }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "read-tree.l"
assert(!s.empty()); s.top()->label.cat = symbol(readtreetext); BEGIN(PC); 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "read-tree.l"
assert(!s.empty()); s.top()->label.cat = symbol(readtreetext); BEGIN(PC);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "read-tree.l"
/* ignore index tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 92 "read-tree.l"
/* ignore GF tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 93 "read-tree.l"
/* ignore other tags */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 94 "read-tree.l"
unput(readtreetext[0]); BEGIN(FC);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "read-tree.l"
/* ignore spaces */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "read-tree.l"
++readtree_lineno;   /* increment line count */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "read-tree.l"
message("Unexpected character", readtreetext); std::cerr << "Parse tree so far: " << root << '\n'; abort();
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "read-tree.l"
ECHO;
	YY_BREAK
#line 1844 "read-tree.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FC):
case YY_STATE_EOF(NC):
case YY_STATE_EOF(CAT):
case YY_STATE_EOF(PC):
case YY_STATE_EOF(IND):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start_state_list[yy_start];

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 128)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register int yy_c = 128;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 100 "read-tree.l"


tree* readtree_root(FILE* fp, bool downcase_flag)
{
  readtreein = fp;
  BEGIN(RT);
  return readtree_lex(downcase_flag);
}

tree* readtree(FILE* fp, bool downcase_flag)
{
  readtreein = fp;
  BEGIN(RTC);
  return readtree_lex(downcase_flag);
}

tree* readtree_root(const char* str, bool downcase_flag)
{
  readtree_lineno = 1;
  readtree_filename = str;
  YY_BUFFER_STATE buf = readtree_scan_string(str);
  BEGIN(RT);
  tree* t = readtree_lex(downcase_flag);
  readtree_delete_buffer(buf);
  readtree_filename = NULL;
  return t;
}

tree* readtree(const char* str, bool downcase_flag)
{
  readtree_lineno = 1;
  readtree_filename = str;
  YY_BUFFER_STATE buf = readtree_scan_string(str);
  BEGIN(RTC);
  tree* t = readtree_lex(downcase_flag);
  readtree_delete_buffer(buf);
  readtree_filename = NULL;
  return t;
}
